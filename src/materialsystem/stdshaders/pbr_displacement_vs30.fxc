//========= ShiroDkxtro2's --ACROHS Ultimate Shaders Project-- ============//
//
//	Initial D.	:	21.03.2023 DMY
//	Last Change :	10.04.2023 DMY
//
//	Purpose of this File :	VertexShader for pbr vs30, to be used on Brushes
//
//===========================================================================//

//	Whether or not we need normal, detail or envmapmask uv modifications.
//	STATIC: "SEAMLESS"					"0..1"
//	STATIC: "SEAMLESS_SECONDARY"		"0..1"
//  STATIC: "DETAILTEXTURE_UV"			"0..1"
//	STATIC:	"BLENDMODULATE_UV"			"0..1"

// We include both common_vs_fxc.h and common_fxc.h ( through vs_fxc.h )
// This is done to get definitions etc for vertex shaders 
// #include "common_vs_fxc.h"

// Include for lux shaders
#include "lux_common_vs_fxc.h"

const float4 cBaseTexCoordTransform[2]			:	register(SHADER_SPECIFIC_CONST_13); // 13 & 14
const float4 cBase2TexCoordTransform[2]			:	register(c242); // c242 & c243
const float4 cNormalTexCoordTransform[2]		:	register(SHADER_SPECIFIC_CONST_15); // 15 & 16
const float4 cNormal2TexCoordTransform[2]		:	register(c244); // c244 & c245
const float4 cSeamlessScales					:	register(c240);

#define SEAMLESS_BASE_SCALE cSeamlessScales.x

#if DETAILTEXTURE_UV
const float4 cDetailTexCoordTransform[2]		:	register( SHADER_SPECIFIC_CONST_17 );	// 17 & 18
#endif

#if BLENDMODULATE_UV
const float4 cBlendModulateTexCoordTransform[2]	:	register(SHADER_SPECIFIC_CONST_10); //  c14 & c15
#endif

//-----------------------------------------------------------------------------
// Input vertex format
//-----------------------------------------------------------------------------
struct VS_INPUT
{
    // This is all of the stuff that we ever use
    float4 vPos                     : POSITION;
	float4 vBoneWeights             : BLENDWEIGHT;	//	Despite no bones,
	float4 vBoneIndices             : BLENDINDICES; //	we use these in SkinPositionAndNormal()
    float4 vNormal                  : NORMAL;
    float2 vTexCoord0               : TEXCOORD0;
    float4 vLightmapTexCoord        : TEXCOORD1;
    float4 vLightmapTexCoordOffset  : TEXCOORD2;
	float4 vColor                   : COLOR0;
//	float3 vSpecular : COLOR1;
};

struct VS_OUTPUT
{
    // Stuff that isn't seen by the pixel shader
	// This is used by the GPU to determine what's actually rendered on-screen ( The actual screenspace position of our triangles )
    float4 ProjPosSetup				:	POSITION;
    // Stuff that is seen by the pixel shader
    float4	BaseBaseTexCoords		:	TEXCOORD0;
	float4	NormalNormalTexCoords	:	TEXCOORD1;
	float3	WorldNormal				:	TEXCOORD2;
	float3	WorldPos				:	TEXCOORD3;
	float3	DetailCoords_ProjPosZ	:	TEXCOORD4; // EnvMapMask UVW, .w = ProjPosZ
	float4	LightmapTexCoord1And2	:	TEXCOORD5;
	float4	LightmapTexCoord3		:	TEXCOORD6;
	float4	BlendMaskUVW_BlendScale	:	TEXCOORD7;
	float4	SeamlessWeights			:	TEXCOORD8; // .w is Base Scale
	// Can't add any more than this. Need to do exclusion
};

//-----------------------------------------------------------------------------
// Main shader entry point
//-----------------------------------------------------------------------------
VS_OUTPUT main( const VS_INPUT v )
{
	VS_OUTPUT o = ( VS_OUTPUT )0;
	
	float3 vNormal;
	DecompressVertex_Normal(v.vNormal, vNormal);
	
#if SEAMLESS

	float3 NormalizedNormal = normalize(mul( vNormal, ( float3x3 )cModel[0] ));

	// "sums to 1."
	// TODO: A face has a 3 dimensional vector that defines in which direction it is pointing.
	// The sum of this vector is always 1 as it uses a 0-1 range.
	// However we now multiply it by itself, this should never sum to 1 unless the face was facing in only a single direction.
	// So why did the comment say it sums to 1.? It definitely shouldn't!
	NormalizedNormal = NormalizedNormal * NormalizedNormal;
	o.SeamlessWeights.xyz		= NormalizedNormal;
#endif

	// We mainly use SkinPositionAndNormal because we want the normal ( and pos )
	float3 WorldNormal, WorldPos;
	SkinPositionAndNormal(false, v.vPos, vNormal, v.vBoneWeights, v.vBoneIndices, WorldPos, WorldNormal);
	
	// Transform into projection space
	float4 vProjPos = mul(float4(WorldPos, 1), cViewProj);
	o.ProjPosSetup = vProjPos;
	vProjPos.z = dot(float4(WorldPos, 1), cViewProjZ);
	
	o.DetailCoords_ProjPosZ.z = vProjPos.z;
//	o.Fog = CalcFog(WorldPos, vProjPos.xyz, g_FogType);
	
	// Needed for water fog alpha and diffuse lighting 
	o.WorldPos.xyz	  = WorldPos;
	o.WorldNormal.xyz = normalize(WorldNormal);
	
	o.LightmapTexCoord3.z = v.vTexCoord0.x * cBaseTexCoordTransform[0].x + cBaseTexCoordTransform[0].w;
	o.LightmapTexCoord3.w = v.vTexCoord0.y * cBaseTexCoordTransform[1].y + cBaseTexCoordTransform[1].w;
	o.LightmapTexCoord1And2.xy = v.vLightmapTexCoord + v.vLightmapTexCoordOffset;
	
	float2 LightmapTexCoord2 = o.LightmapTexCoord1And2.xy + v.vLightmapTexCoordOffset;
	float2 LightmapTexCoord3 = LightmapTexCoord2 + v.vLightmapTexCoordOffset;
	
	// Reversed component order
	o.LightmapTexCoord1And2.w	= LightmapTexCoord2.x;
	o.LightmapTexCoord1And2.z	= LightmapTexCoord2.y;
	o.LightmapTexCoord3.xy		= LightmapTexCoord3;

	// BlendModulateTexture Coordinate Transform
	#if BLENDMODULATE_UV
		o.BlendMaskUVW_BlendScale.x = v.vTexCoord0.x * cBlendModulateTexCoordTransform[0].x + cBlendModulateTexCoordTransform[0].w;
		o.BlendMaskUVW_BlendScale.y = v.vTexCoord0.y * cBlendModulateTexCoordTransform[1].y + cBlendModulateTexCoordTransform[1].w;
	#endif

	// DetailTexture Coordinate Transform
	#if DETAILTEXTURE_UV
		o.DetailCoords_ProjPosZ.x = v.vTexCoord0.x * cDetailTexCoordTransform[0].x	+ cDetailTexCoordTransform[0].w;
		o.DetailCoords_ProjPosZ.y = v.vTexCoord0.y * cDetailTexCoordTransform[1].y	+ cDetailTexCoordTransform[1].w;
	#endif

	#if SEAMLESS
	// Used for all Seamless coords.
		float3 f3SeamlessPos = mul( float4( v.vPos ), cModel[0] ).xyz;

		float3 f3BaseCoords		=	f3SeamlessPos;
		float3 f3Base2Coords	=	f3SeamlessPos;
		#if SEAMLESS_SECONDARY
			
			f3Base2Coords.xy	*= float2(cBase2TexCoordTransform[0].x, cBase2TexCoordTransform[1].y);
			f3Base2Coords.xyz	*= SEAMLESS_BASE_SCALE;
			f3Base2Coords.xy	+= float2(cBase2TexCoordTransform[0].w, cBase2TexCoordTransform[1].w);

			// Original Coords
				o.BaseBaseTexCoords.x = v.vTexCoord0.x * cBaseTexCoordTransform[0].x + cBaseTexCoordTransform[0].w;
				o.BaseBaseTexCoords.y = v.vTexCoord0.y * cBaseTexCoordTransform[1].y + cBaseTexCoordTransform[1].w;

			// Seamless Secondary
				o.BaseBaseTexCoords.zw	= f3Base2Coords.xy;
				o.SeamlessWeights.w		= f3Base2Coords.z; // Ugly packing.
		#else
		// [0].x is scale for U, and [1].y is scale for V
			f3BaseCoords.xy	 *=	 float2(cBaseTexCoordTransform[0].x,  cBaseTexCoordTransform[1].y);
			f3Base2Coords.xy *=	float2(cBase2TexCoordTransform[0].x, cBase2TexCoordTransform[1].y);

		// Apply Seamless Scale
			f3BaseCoords.xyz	*= SEAMLESS_BASE_SCALE;
			f3Base2Coords.xyz	*= SEAMLESS_BASE_SCALE;

		// [0].w is translation for U, and [1].w is translation for V
			f3BaseCoords.xy		+=	 float2(cBaseTexCoordTransform[0].w,  cBaseTexCoordTransform[1].w);
			f3Base2Coords.xy	+=	float2(cBase2TexCoordTransform[0].w, cBase2TexCoordTransform[1].w);

			o.BaseBaseTexCoords.xy = f3BaseCoords.xy;
			o.SeamlessWeights.w = f3BaseCoords.z; // Ugly packing.
			// Second Textures will use the same seamless-coordinates.
			o.BaseBaseTexCoords.zw = f3Base2Coords.xy;
		#endif
	#else
	// Regular Coordinate Transformation
		o.BaseBaseTexCoords.x = v.vTexCoord0.x * cBaseTexCoordTransform[0].x  + cBaseTexCoordTransform[0].w;
		o.BaseBaseTexCoords.y = v.vTexCoord0.y * cBaseTexCoordTransform[1].y  + cBaseTexCoordTransform[1].w;
		o.BaseBaseTexCoords.z = v.vTexCoord0.x * cBase2TexCoordTransform[0].x + cBase2TexCoordTransform[0].w;
		o.BaseBaseTexCoords.w = v.vTexCoord0.y * cBase2TexCoordTransform[1].y + cBase2TexCoordTransform[1].w;
	#endif

	// NormalTexture Coordinate Transform
	#if SEAMLESS
		#if SEAMLESS_SECONDARY
			// Regular Transform
			o.NormalNormalTexCoords.x	= v.vTexCoord0.x * cNormalTexCoordTransform[0].x	+ cNormalTexCoordTransform[0].w;
			o.NormalNormalTexCoords.y	= v.vTexCoord0.y * cNormalTexCoordTransform[1].y	+ cNormalTexCoordTransform[1].w;
			// Just use same as basecoords...
			o.NormalNormalTexCoords.zw	= f3Base2Coords.xy;
		#else
			o.NormalNormalTexCoords.xy	=  f3BaseCoords.xy;
			o.NormalNormalTexCoords.zw	= f3Base2Coords.xy;
		#endif
	#else
	// Regular Coordinate Transformation
		o.NormalNormalTexCoords.x	= v.vTexCoord0.x * cNormalTexCoordTransform[0].x	+ cNormalTexCoordTransform[0].w;
		o.NormalNormalTexCoords.y	= v.vTexCoord0.y * cNormalTexCoordTransform[1].y	+ cNormalTexCoordTransform[1].w;
		o.NormalNormalTexCoords.z	= v.vTexCoord0.x * cNormal2TexCoordTransform[0].x	+ cNormal2TexCoordTransform[0].w;
		o.NormalNormalTexCoords.w	= v.vTexCoord0.y * cNormal2TexCoordTransform[1].y	+ cNormal2TexCoordTransform[1].w;
	#endif

	// This should be the displacement blend alpha...
		o.BlendMaskUVW_BlendScale.w = v.vColor.w;

    return o;
}