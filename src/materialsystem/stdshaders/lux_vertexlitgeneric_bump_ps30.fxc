// shadertype=hlsl
//========= ShiroDkxtro2's --ACROHS Ultimate Shaders Project-- ============//
//
//	Description :	What is this?
//					This is a total rewrite of the SDK Shaders.
//					Under the prefix of lux_ shaders.
//					The goal is to make the most possible combinations work,
//					add new parameters and functionality and...
//					Most importantly.-Decrease Compile times. A lot.
//					For ACROHS specifically, we also add CSM support.
//					This nukes ps20b and below. No Linux support.
//
//	Initial D.	:	14.02.2023 DMY
//	Last Change :	22.02.2023 DMY
//
//	Purpose of this File :	Bumped Phonged PixelShader for ps30, to be used on LUX_VertexLitGeneric
//
//===========================================================================//

//===========================================================================//
//	Declare Static Combos
//===========================================================================//
// ShiroDkxtro2: The current order I compiled in 29 seconds on 4 cores @4.1GHz. ( and 19 seconds on 8 cores @4.1GHz while doing other stuff)
// STATIC:	"FLASHLIGHT"				"0..1" // PROJECTEDTEXTURES 1 0
// STATIC:	"ENVMAPMODE"				"0..4" // CUBEMAPS 4 0
// STATIC:	"SELFILLUMMODE"				"0..3" // SELFILLUMTEXTURING 3 2
// STATIC:	"ENVMAPFRESNEL"				"0..0" // CUBEMAPS_FRESNEL 1 0
// STATIC:	"BLENDTINTBYBASEALPHA"		"0..0" // BASETINTINGVIAALPHA 1 0
// STATIC:	"DETAILTEXTURE"				"0..1" // DETAILTEXTURING 1 0
// STATIC:	"DESATURATEBYBASEALPHA"		"0..0"

//===========================================================================//
//	Declare Dynamic Combos
//===========================================================================//
// DYNAMIC:	"FLASHLIGHTSHADOWS"			"0..0"
// DYNAMIC:	"PIXELFOGTYPE"				"0..1"
// DYNAMIC:	"WRITE_DEPTH_TO_DESTALPHA"	"0..1"
// DYNAMIC:	"WRITEWATERFOGTODESTALPHA"	"0..1"
// DYNAMIC: "LIGHTMAPPED_MODEL"			"0..1" // Because this is a DYNAMIC, it can't just be turned off using our preprocessor. It won't hurt either...
// DYNAMIC: "NUM_LIGHTS"				"0..4"

//===========================================================================//
//	Skipping combos that are unneeded
//	GIGA IMPORTANT :	The order of the STATIC:'s and the order of the skips
//						will DRASTICALLY affect compiletime!
// ShiroDkxtro2:	The current order I compiled in 29 seconds on 4 cores @4.1GHz.
//					19 seconds on 8x@4.1GHz while doing other stuff in the background.
//===========================================================================//
// SKIP: $FLASHLIGHT					&&	($ENVMAPMODE || $SELFILLUMMODE)
// SKIP: !$ENVMAPMODE					&&	$ENVMAPFRESNEL
// SKIP: ( $SELFILLUMMODE == 2			&&	$ENVMAPMODE != 2 )
// SKIP: $BLENDTINTBYBASEALPHA			&&	( $ENVMAPMODE == 3 || $SELFILLUMMODE == 1 || $DESATURATEBYBASEALPHA )
// SKIP: ( $PIXELFOGTYPE == 0			&&	$WRITEWATERFOGTODESTALPHA != 0 )
// SKIP: !$FLASHLIGHT					&&	$FLASHLIGHTSHADOWS

// This is used to disable features automatically.
#include "ACROHS_Defines.h"

// This is NOT a Shader used on BRUSHES
// #define BRUSH

// Can use Seamless Texturemapping
#define SEAMLESS

// This is a Shader used on MODELS
#define MODEL

// This Shaders USES Normalmaps
#define NORMALTEXTURE

//===========================================================================//
//	Include Files ( and with them, function declarations )
//===========================================================================//
//	This has to be included first. It includes pragmas, #define's, and the register map.
#include "lux_common_ps_fxc.h"
// SelfIllum Data
#include "lux_common_selfillum.h"
// EnvMapping Data
#include "lux_common_envmap.h"
// common lighting functions
#include "lux_common_lighting.h"
// common flashlight function.
#include "lux_common_flashlight.h"

// Only for model lightmaps.
sampler Sampler_LightMap		: register(s11);

//===========================================================================//
//	Everything Vertex Shader is outputting, enters here
//===========================================================================//
struct PS_INPUT
{
    float4	BaseDetailTexCoord		:	TEXCOORD0;
	float4	NormalENMTexCoord		:	TEXCOORD1;
	float3	WorldNormal				:	TEXCOORD2;
	float3	WorldPos				:	TEXCOORD3;
	float3	ProjPos					:	TEXCOORD4;
	float4	LightmapTexCoord1And2	:	TEXCOORD5;
	float4	LightAtten				:	TEXCOORD6;
//	float4	StaticPropLighting		:	TEXCOORD7;
};
 
//===========================================================================//
//	Rendering Start - Entry point
//===========================================================================//
float4 main(PS_INPUT i) : COLOR
{
	//	Getting our PS_INPUT... TODO/FIXME: Does this require more memory?
	//===========================================================================//
	// If you see this, then Integer Constant Registers don't work, or I haven't found a way to use them.
	int iDetailBlendMode = trunc(f1DetailBlendMode);
	// int g_Debug = trunc(DEBUG.x);

	float2 f2BaseTextureUV = i.BaseDetailTexCoord.xy;

	#if DETAILTEXTURE
	float2 f2DetailTextureUV = i.BaseDetailTexCoord.zw;
	#endif

	// Always need it.
	float2 f2NormalUV = i.NormalENMTexCoord.xy;

	#if (ENVMAPMODE == 2) && !FLASHLIGHT
	float2 f2EnvMapMaskUV = i.NormalENMTexCoord.zw;
	#endif

	// .xyz's in case we need to pack something later
    float3 f3FaceNormal			= i.WorldNormal.xyz;
	float3 f3WorldPosition		= i.WorldPos.xyz;
	float3 f3ProjectPosition	= i.ProjPos.xyz;
	float2 f2LightmapUV			= i.LightmapTexCoord1And2.xy; // TODO: figure out what the heck is AA_CLAMP supposed to do

	// ShiroDkxtro2 :	We do this like the PBR Shader.
	//					Tottery says this causes issues on smoothed models.
	//					However, it means we can receive more things from the Vertex Shader
	//					And I have not noticed any of such Issues.
	float3 f3SurfaceNormal = normalize(f3FaceNormal);
    float3 f3SurfaceTangent;
    float3 f3SurfaceBase; 
    float f1FlipSign;
    float3x3 f3x3NormalBasis = Compute_Tangent_Frame(f3SurfaceNormal, f3WorldPosition, f2NormalUV , f3SurfaceTangent, f3SurfaceBase, f1FlipSign);

	//===========================================================================//
	//	Getting the current Pixels Color from the Samplers
	//===========================================================================//


	float4	f4BaseTexture	= tex2D(	Sampler_BaseTexture,		f2BaseTextureUV);
	//		( not on this shader	  ) Sampler_BaseTexture2
	float4	f4NormalTexture	= tex2D(	Sampler_NormalTexture,		f2NormalUV);
	//		( not on this shader	  ) Sampler_NormalTexture2
	#if DETAILTEXTURE
	float4	f4DetailTexture	= tex2D(	Sampler_DetailTexture,		f2DetailTextureUV);
	#endif

	#if (ENVMAPMODE == 2) && !FLASHLIGHT
	float4	f4EnvMapMask	= tex2D(	Sampler_EnvMapMask,			f2EnvMapMaskUV);
	#endif

	//		( need to get it later... )	Sampler_LightWarpTexture
	//									Sampler_UNUSED
	//									Sampler_UNUSED
	//									Sampler_UNUSED
	//									Sampler_UNUSED
#if LIGHTMAPPED_MODEL && !FLASHLIGHT
	float3	f3LightMap = tex2D(Sampler_LightMap, f2LightmapUV).xyz * 2.0f;
#endif
	//		( need to get it later... )	Sampler_BlendModulate
	//		( need to get it later... )	Sampler_ShadowDepth
	//		( need to get it later... )	Sampler_RandomRotation
	//		( need to get it later... )	Sampler_FlashlightCookie

	#if (SELFILLUMMODE == 1 || SELFILLUMMODE == 3)
	float4 f4SelfIllum;
//		if(bSeamless_Base)
//		{
//			f4SelfIllum		= tex2D_Seamless(Sampler_SelfIllum, f3BaseTextureUV, f4SeamlessWeights);
//		}
//		else
//		{
		f4SelfIllum		= tex2D(	Sampler_SelfIllum,	f2BaseTextureUV.xy);		
//		}					
	#endif				

	// This is the TextureNormal, perturbed one anyways
	float3 f3NormalTexture = f4NormalTexture.xyz * 2.0f - 1.0f; // normalize(f4NormalTexture.xyz - float3(0.5, 0.5, 0.5)) * 2.0f;
	f3NormalTexture *= 2.0f;
	// This is a modified WorldNormal
	f3FaceNormal = normalize(mul(f3NormalTexture, f3x3NormalBasis));

	//===========================================================================//
	//	Adding tints when possible
	//===========================================================================//

	#if BLENDTINTBYBASEALPHA
	// Same as Stock VertexLitGeneric...
	float3	f4TintedBaseTexture	= f4BaseTexture.xyz * f3BaseTextureTint;
			f4TintedBaseTexture	= lerp(f4TintedBaseTexture, f3BaseTextureTint, f1BlendTintFactor);
			f4BaseTexture.xyz	= lerp(f4BaseTexture.xyz, f4TintedBaseTexture, f4BaseTexture.w);
	#else
			f4BaseTexture.xyz *= f3BaseTextureTint;
		#if DESATURATEBYBASEALPHA
			float3	f3DesaturatedBaseAlpha = dot(f4BaseTexture.xyz, f3LumCoefficients);
					f4BaseTexture.xyz = lerp(f4BaseTexture.xyz, f3DesaturatedBaseAlpha, f1DesaturationFactor);
		#endif
	#endif

#if DETAILTEXTURE
	f4DetailTexture.xyz *= f3DetailTextureTint;
	f4BaseTexture = TextureCombine( f4BaseTexture, f4DetailTexture, iDetailBlendMode, f1DetailBlendFactor );
#endif

	//===========================================================================//
	//	Things we need in Flashlight State
	//===========================================================================//
	
	// for !FLASHLIGHT
    float3 f4Result = {0.0f, 0.0f, 0.0f};
	f3NormalTexture.y *= f1FlipSign; // Fixup TextureNormal for ambient lighting

	//===========================================================================//
	//	Rendering, everything that renders when not under a flashlight 
	//===========================================================================//
#if !FLASHLIGHT
	
    float3	f3ViewVector = normalize(g_EyePos.xyz - f3WorldPosition); // Lo
	float	f1NdotV		 = max(0, dot(f3FaceNormal, f3ViewVector)); // cosLo

// Lighting here
#if LIGHTMAPPED_MODEL
	f4Result = f4BaseTexture.xyz * f3LightMap; //  * f3NormalTexture

	// This will only apply lighting from named-local-lights. ( Aka only lights that have a name will do this lighting )
	f4Result.xyz *= LUX_BumpedLighting(f3FaceNormal, f3WorldPosition, i.LightAtten);
#else
	// f3Lighting is later used for $envmaplightscale, except the model is lightmapped.
	float3 f3Lighting = LUX_BumpedLighting(f3FaceNormal, f3WorldPosition, i.LightAtten);
	f4Result = f4BaseTexture.xyz;
	f4Result *= f3Lighting; 
#endif // LIGHTMAPPED_MODEL

	// Are we supposed to render a Cubemap?
#if (ENVMAPMODE > 0)

	// EnvMapMode 1 uses this. So it has to be prepared, always.
	float3 f3CubemapMask = 1.0f;

#if (ENVMAPMODE == 2) // $EnvMapMask
	f3CubemapMask = f4EnvMapMask.xyz;
#elif (ENVMAPMODE == 3) // $BaseAlphaEnvMapMask
	f3CubemapMask = f4BaseTexture.aaa;
#elif (ENVMAPMODE == 4) // $NormalMapAlphaEnvMapMask
	f3CubemapMask = f4NormalTexture.www;
#endif

		// A better reflection vector...
		float3 f3ReflectionVector = 2.0 * f1NdotV * f3FaceNormal - f3ViewVector;

		// Lookup the Texture using f3ReflectionVector as the VectorUV for the Cubemap. ( which pixel it points at)
        float4 f4SpecularUV = float4(f3ReflectionVector, ENVMAPLOD);
		float3 f3SpecularLookUp = ENV_MAP_SCALE * texCUBE(Sampler_EnvironmentMap, f4SpecularUV).xyz;


		f3SpecularLookUp *= f3CubemapMask;

		f3SpecularLookUp *= f3EnvMapTint;
		float3 f3LookupHighSaturated = f3SpecularLookUp * f3SpecularLookUp;
		f3SpecularLookUp = lerp( f3SpecularLookUp, f3LookupHighSaturated, f1EnvMapContrast );

		// If you are curious this has to do with perception.
		float3 f3DesaturatedCubemap = dot( f3SpecularLookUp, float3( 0.299f, 0.587f, 0.114f ) );
		f3SpecularLookUp = lerp( f3DesaturatedCubemap, f3SpecularLookUp, f3EnvMapSaturation );

#if ENVMAPFRESNEL

	// TODO: Consider doing Unreal Engine Fresnel based on Envmapmask
	float f1Fresnel = 1.0f - f1NdotV;
	f1Fresnel = f1EnvMapFresnelScale * pow( f1Fresnel, f1EnvMapFresnelExponent) + f1EnvMapFresnelBias;
	f3SpecularLookUp *= f1Fresnel;

#endif

#if LIGHTMAPPED_MODEL // && !FLASHLIGHT ( we are already in !FLASHLIGHT )
	f4Result += lerp(f3SpecularLookUp, f3SpecularLookUp * saturate(f3LightMap), f1EnvMapLightScale);
#else
	f4Result += lerp(f3SpecularLookUp, f3SpecularLookUp * saturate(f3Lighting), f1EnvMapLightScale);
#endif


#endif // End Cubemap
#else // Start Flashlight

	// No more mess.
	f4Result = f4BaseTexture.xyz * LUX_DoFlashlight(f3WorldPosition, f3FaceNormal, true);

#endif // !FLASHLIGHT and FLASHLIGHT

    float f1FogFactor = CalcPixelFogFactor(PIXELFOGTYPE, g_FogParams, g_EyePos.xyz, f3WorldPosition, f3ProjectPosition.z);

// This is important because for some reason SKIP's don't want to work.
#if !FLASHLIGHT
// I think the order in which we add this doesn't matter so its at the end
// If statements should ever-so-slightly accelerate. By skipping pixels that get nothing added
// TODO: consider doing additive selfillumination instead. Maybe min() it though to not saturate...
// TODO: consider raising 0 to 0.001 for when something isn't "truly" black
#if (SELFILLUMMODE == 1) // Basealpha Selfillum and mask texture
		if (f4BaseTexture.a > 0)
		{
			f4SelfIllum.xyz = lerp( f4BaseTexture.aaa, f4SelfIllum.xyz, f1SelfIllumMaskFactor);
			f4Result.xyz = lerp(f4Result.xyz, f4BaseTexture.xyz * f3SelfIllumTint, f4SelfIllum.xyz);
		}
#elif ((SELFILLUMMODE == 2) && (ENVMAPMODE == 2))
		if(f4EnvMapMask.w > 0)
		{
			f4Result.xyz = lerp(f4Result.xyz, f4BaseTexture.xyz * f3SelfIllumTint ,f4EnvMapMask.w);
		}
#elif (SELFILLUMMODE == 3)
			f4Result.xyz += f4SelfIllum.xyz * f3SelfIllumTint;;
#endif // Selfillummode

#if WRITEWATERFOGTODESTALPHA && (PIXELFOGTYPE == PIXEL_FOG_TYPE_HEIGHT)
    float f1Alpha = f1FogFactor;
#else
    float f1Alpha = f4BaseTexture.a;
#endif // WRITEWATERFOGTODESTALPHA && (PIXELFOGTYPE == PIXEL_FOG_TYPE_HEIGHT)
#else
    float f1Alpha = 0.0f;

#endif // !FLASHLIGHT

    bool bWriteDepthToAlpha = (WRITE_DEPTH_TO_DESTALPHA != 0) && (WRITEWATERFOGTODESTALPHA == 0);

#if DETAILTEXTURE
	f4Result = TextureCombinePostLighting( f4Result, f4DetailTexture, iDetailBlendMode, f1DetailBlendFactor ); // $detail, $detailblendmode $detailblendfactor
#endif

// Result must be f4 because of DetailTextureCombine
    return FinalOutput(float4(f4Result.xyz, f1Alpha), f1FogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, bWriteDepthToAlpha, f3ProjectPosition.z);
}